version: '3.9'

x-environment:
  &py-environment
  DEBUG: '${DEBUG:-False}'
  NODE_ENV: 'production'
  DEV_ENV: 'True'  # necessary to have nginx connect to web container
  SECRET_KEY: local_unsafe_key
  DATABASE_URL: postgres://postgres@db:5432/postgres
  MITX_ONLINE_BASE_URL: ${MITX_ONLINE_BASE_URL:-http://mitxonline.odl.local:8013}
  MITX_ONLINE_SECURE_SSL_REDIRECT: 'False'
  MITX_ONLINE_DB_DISABLE_SSL: 'True'
  MITX_ONLINE_ADMIN_EMAIL: admin@localhost
  MITX_ONLINE_REFINE_OIDC_CONFIG_CLIENT_ID: ${MITX_ONLINE_ADMIN_CLIENT_ID:-refine-local-client-id}
  ELASTICSEARCH_URL: elastic:9200
  CELERY_TASK_ALWAYS_EAGER: 'False'
  REDIS_URL: redis://redis:6379/4
  DOCKER_HOST: ${DOCKER_HOST:-missing}
  OPENEDX_API_KEY: ${OPENEDX_API_KEY:-PUT_YOUR_API_KEY_HERE}

x-extra-hosts:
  &default-extra-hosts
  - "edx.odl.local:${OPENEDX_IP:-172.22.0.1}"
  - "host.docker.internal:host-gateway"
  - "local.overhang.io:host-gateway"

services:
  db:
    image: postgres:11.6
    ports:
      - "5432"

  redis:
    image: redis:6.0.5
    ports:
      - "6379"

  nginx:
    build:
      context: ./nginx
    links:
      - web
    volumes:
      - ./config/nginx.conf.erb:/etc/nginx/templates/nginx.conf.erb
    environment:
      NGINX_WORKERS: 1
      PORT: 8013
      NGINX_UWSGI_PASS: "web:8011"
    networks:
      default:
        aliases:
          # this ensures that containers route this hostname back to the web app
          - "mitxonline.odl.local"
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: django-server
    command: ./scripts/run-django-dev.sh
    stdin_open: true
    tty: true
    ports:
      - "8011:8011"
    environment:
      << : *py-environment
      PORT: 8011
    env_file: .env
    links:
      - db
      - redis
      # these are links instead of `depends_on`
      # because if we just want a shell for `web` we don't want to run these
      - watch
      - refine
    extra_hosts: *default-extra-hosts

  watch:
    build:
      context: .
      dockerfile: Dockerfile.nodeenv
    working_dir: /app
    command: ./scripts/run-watch-dev.sh
    ports:
      - "8012:8012"
    environment:
      PUBLIC_PATH: http://${MITX_ONLINE_HOSTNAME:-mitxonline.odl.local}:8012/
      NODE_ENV: ${NODE_ENV:-development}
      DOCKER_HOST: ${DOCKER_HOST:-missing}
      CONTAINER_NAME: 'watch'
      PORT: 8012
    env_file: .env
    healthcheck:
      test: curl -f http://watch:8012/health || exit 1
      interval: 30s
      timeout: 1s
      retries: 4
      start_period: 180s

  celery:
    build:
      context: .
      dockerfile: Dockerfile
      target: django
    environment: *py-environment
    env_file: .env
    command: >
      /bin/bash -c '
      sleep 3;
      celery -A main.celery:app worker -B -l ${MITX_ONLINE_LOG_LEVEL:-INFO}'
    links:
      - db
      - redis
    extra_hosts: *default-extra-hosts

  refine:
    build:
      context: .
      dockerfile: Dockerfile.nodeenv
    working_dir: /app
    command: ./scripts/run-refine-dev.sh
    ports:
       - "8016:8016"
    environment:
      PUBLIC_PATH: http://${MITX_ONLINE_HOSTNAME:-mitxonline.odl.local}:8016/
      PORT: 8016
      NODE_ENV: ${NODE_ENV:-development}
    depends_on:
      # this doesn't really depend on watch but they step on each other if they start at the same time
      watch:
        condition: service_healthy
    healthcheck:
      test: curl -f http://refine:8016/health || exit 1
      interval: 30s
      timeout: 1s
      retries: 4
      start_period: 180s

  notebook:
    build:
      context: .
      dockerfile: Dockerfile
      target: jupyter-notebook
    profiles: ["notebook"]
    volumes:
      - .:/app
    environment:
      << : *py-environment
    env_file: .env
    command: >
      /bin/bash -c '
      sleep 3 &&
      jupyter notebook --no-browser --ip=0.0.0.0 --port=8080'
    ports:
      - "8080:8080"

  varnish:
    image: varnish:fresh
    links:
      - nginx
    ports:
      - "8013:80"
    volumes:
      - ./config/default.vcl:/etc/varnish/default.vcl:ro
    depends_on:
      - nginx

volumes:
  npm-cache: {}
  django_media: {}
  yarn-cache: {}
